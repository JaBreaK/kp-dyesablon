---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import HeroSection from '../components/HeroSection.astro';
import { supabase } from '../lib/supabase';
 
// Ambil data produk
const { data: posts, error: postError } = await supabase
  .from('produk')
  .select('*');

if (postError) console.error('Gagal ambil produk:', postError.message);

// Ambil data kategori & subkategori
const { data: kategoriData, error: kategoriError } = await supabase
  .from('kategori')
  .select('*');

if (kategoriError) console.error('Gagal ambil kategori:', kategoriError.message);

// Susun nested kategori-subkategori
const categories = kategoriData
  ?.filter(k => k.parent_slug === null)
  .map(parent => ({
    name: parent.name,
    slug: parent.slug,
    subcategories: kategoriData
      .filter(sub => sub.parent_slug === parent.slug)
      .map(sub => ({ name: sub.name, slug: sub.slug }))
  }));
---
<Layout title="Kategori - Dye Apparel" description="Filter produk berdasarkan kategori dengan tombol Apply">
  <Header />

  <main class="container-custom flex flex-col lg:flex-row py-8 gap-8">
    <aside id="sidebar" class="w-full lg:w-1/4 bg-white dark:bg-gray-800 rounded-xl p-6 shadow-md">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">Filter</h2>
      <hr class="border-gray-200 dark:border-gray-700 my-4" />
      <form id="category-filter-form" class="space-y-4">
        {categories.map(cat => (
          <details class="group">
            <summary class="flex justify-between items-center cursor-pointer font-medium text-gray-900 dark:text-gray-100">
              {cat.name} <span class="transition-transform duration-200 group-open:rotate-180">â–¾</span>
            </summary>
            <div class="mt-2 ml-4 space-y-2">
              {cat.subcategories.map(sub => (
                <div class="flex items-center ml-4">
                  <input type="checkbox" id={sub.slug} name="category" value={sub.slug} class="h-4 w-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500 dark:bg-gray-600 dark:border-gray-500" />
                  <label for={sub.slug} class="ml-2 text-sm text-gray-700 dark:text-gray-300">{sub.name}</label>
                </div>
              ))}
            </div>
          </details>
        ))}
        <!-- Apply Filter Button -->
        <!-- Buttons: Apply & Reset -->
        <div class="flex gap-2 mt-4">
          <button
            id="apply-filter-btn"
            type="button"
            class="flex-1 px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500"
          >
            Apply Filter
          </button>
          <button
            id="reset-filter-btn"
            type="button"
            class="flex-1 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400"
          >
            Reset Filter
          </button>
        </div>
      </form>
    </aside>

    <!-- Konten Utama -->
    <section class="w-full lg:w-3/4">
      <HeroSection title="Kategori" highlightText=" Terbaik" description="Pilih kategori layanan kami." />
      <div id="product-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
        {posts?.map(post => (
          <a
            href={`/produk/${post.slug}`}
            class="card block border border-gray-200 dark:border-gray-700 rounded-xl overflow-hidden shadow-sm hover:scale-105 transform transition"
            data-categories={post.categories.join(' ')}
          >
            <img src={post.image} alt={post.title} class="w-full h-48 object-cover" />
            <div class="p-4">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">{post.title}</h3>
            </div>
          </a>
        ))}
      </div>
    </section>
  </main>

  <Footer />

  <!-- Script: manual filter trigger -->
  <script is:inline>
    const form = document.getElementById('category-filter-form');
    const applyBtn = document.getElementById('apply-filter-btn');
    const resetBtn = document.getElementById('reset-filter-btn');

    // Apply filter by reloading page with query params
    applyBtn.addEventListener('click', e => {
      e.preventDefault();
      const checked = Array.from(form.elements['category']).filter(i => i.checked).map(i => i.value);
      const url = window.location.pathname + (checked.length ? '?category=' + checked.join(',') : '');
      window.location.href = url;
    });

    // Reset filter by reloading page without params
    resetBtn.addEventListener('click', e => {
      e.preventDefault();
      window.location.href = window.location.pathname;
    });

    // On page load, filter products based on URL
    document.addEventListener('DOMContentLoaded', () => {
      const cards = document.querySelectorAll('.card');
      const params = new URLSearchParams(window.location.search);
      const catParam = params.get('category');
      const active = catParam ? catParam.split(',') : [];
      cards.forEach(card => {
        const cats = card.dataset.categories.split(' ');
        card.style.display = !active.length || active.some(c => cats.includes(c)) ? 'block' : 'none';
      });
    });

        // Initialize filter from URL on load
      window.addEventListener('DOMContentLoaded', () => {
      const params = new URLSearchParams(window.location.search);
      const catParam = params.get('category');
      if (catParam) {
        // pre-check based on URL
        catParam.split(',').forEach(slug => {
          const input = document.getElementById(slug.trim());
          if (input) input.checked = true;
        });
        applyFilter();
      }
    });
  </script>
</Layout>

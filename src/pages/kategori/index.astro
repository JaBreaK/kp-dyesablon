---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import HeroSection from '../../components/HeroSection.astro';

// Example posts data (replace with your actual products)
const posts = [
  { title: 'Custom Jersey Sepeda', categories: ['jersey-sepeda'], image: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80' },
  { title: 'Custom Jersey Badminton', categories: ['jersey-badminton'], image: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80' },
  { title: 'Hoodie Olahraga', categories: ['hoodie'], image: 'https://images.unsplash.com/photo-1600880292203-757bb62b4baf?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80' },
  { title: 'Jaket Kantor', categories: ['jaket'], image: 'https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80' },
  { title: 'Lanyard ID Card', categories: ['lanyard'], image: 'https://images.unsplash.com/photo-1581291518633-83b4ebd1d83e?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80' },
  { title: 'Kaos Sablon Custom', categories: ['sablon-kaos'], image: 'https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80' },
];

// Category definitions
const categories = [
  { name: 'Sublimasi', slug: 'sublimasi', subcategories: [
      { name: 'Jersey Sepeda', slug: 'jersey-sepeda' },
      { name: 'Jersey Badminton', slug: 'jersey-badminton' },
      { name: 'Jersey Football', slug: 'jersey-football' },
      { name: 'Batik', slug: 'batik' },
      { name: 'Spanduk', slug: 'spanduk' },
      { name: 'Lanyard', slug: 'lanyard' },
    ]
  },
  { name: 'Sablon', slug: 'sablon', subcategories: [
      { name: 'Kaos', slug: 'sablon-kaos' },
      { name: 'DTF', slug: 'dtf' },
      { name: 'Plastisol', slug: 'plastisol' },
    ]
  },
  { name: 'Jahit', slug: 'jahit', subcategories: [
      { name: 'Kaos', slug: 'jahit-kaos' },
      { name: 'Hoodie', slug: 'hoodie' },
      { name: 'Kemeja', slug: 'kemeja' },
      { name: 'Seragam', slug: 'seragam' },
      { name: 'Jaket', slug: 'jaket' },
    ]
  },
  { name: 'Jasa Cetak', slug: 'dtf-motoran', subcategories: [
      { name: 'Cetak DTF', slug: 'motoran' },
    ]
  },
];
---

<Layout title="Kategori - Dye Apparel" description="Filter produk berdasarkan kategori dengan tombol Apply">
  <Header />

  <main class="container-custom flex flex-col lg:flex-row py-8 gap-8">
    <!-- Sidebar Filter -->
    <aside id="sidebar" class="w-full lg:w-1/4 bg-white dark:bg-gray-800 rounded-xl p-6 shadow-md">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">Filter</h2>
      <hr class="border-gray-200 dark:border-gray-700 my-4" />
      <form id="category-filter-form" class="space-y-4">
        {categories.map(cat => (
          <details class="group">
            <summary class="flex justify-between items-center cursor-pointer font-medium text-gray-900 dark:text-gray-100">
              {cat.name} <span class="transition-transform duration-200 group-open:rotate-180">â–¾</span>
            </summary>
            <div class="mt-2 ml-4 space-y-2">
              {cat.subcategories.map(sub => (
                <div class="flex items-center ml-4">
                  <input type="checkbox" id={sub.slug} name="category" value={sub.slug} class="h-4 w-4 text-primary-600 border-gray-300 rounded focus:ring-primary-500 dark:bg-gray-600 dark:border-gray-500" />
                  <label for={sub.slug} class="ml-2 text-sm text-gray-700 dark:text-gray-300">{sub.name}</label>
                </div>
              ))}
            </div>
          </details>
        ))}
        <!-- Apply Filter Button -->
        <!-- Buttons: Apply & Reset -->
        <div class="flex gap-2 mt-4">
          <button
            id="apply-filter-btn"
            type="button"
            class="flex-1 px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500"
          >
            Apply Filter
          </button>
          <button
            id="reset-filter-btn"
            type="button"
            class="flex-1 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-400"
          >
            Reset Filter
          </button>
        </div>
      </form>
    </aside>

    <!-- Konten Utama -->
    <section class="w-full lg:w-3/4">
      <HeroSection title="Kategori" highlightText="Terbaik" description="Pilih kategori layanan kami." />
      <div id="product-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
        {posts.map(post => (
          <div class="card border border-gray-200 dark:border-gray-700 rounded-xl overflow-hidden shadow-sm hover:scale-105 transform transition" data-categories={post.categories.join(' ')}>
            <img src={post.image} alt={post.title} class="w-full h-48 object-cover" />
            <div class="p-4">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">{post.title}</h3>
            </div>
          </div>
        ))}
      </div>
    </section>
  </main>

  <Footer />

  <!-- Script: manual filter trigger -->
  <script is:inline>
    const form = document.getElementById('category-filter-form');
    const applyBtn = document.getElementById('apply-filter-btn');
    const resetBtn = document.getElementById('reset-filter-btn');

    // Apply filter by reloading page with query params
    applyBtn.addEventListener('click', e => {
      e.preventDefault();
      const checked = Array.from(form.elements['category']).filter(i => i.checked).map(i => i.value);
      const url = window.location.pathname + (checked.length ? '?category=' + checked.join(',') : '');
      window.location.href = url;
    });

    // Reset filter by reloading page without params
    resetBtn.addEventListener('click', e => {
      e.preventDefault();
      window.location.href = window.location.pathname;
    });

    // On page load, filter products based on URL
    document.addEventListener('DOMContentLoaded', () => {
      const cards = document.querySelectorAll('.card');
      const params = new URLSearchParams(window.location.search);
      const catParam = params.get('category');
      const active = catParam ? catParam.split(',') : [];
      cards.forEach(card => {
        const cats = card.dataset.categories.split(' ');
        card.style.display = !active.length || active.some(c => cats.includes(c)) ? 'block' : 'none';
      });
    });

        // Initialize filter from URL on load
      window.addEventListener('DOMContentLoaded', () => {
      const params = new URLSearchParams(window.location.search);
      const catParam = params.get('category');
      if (catParam) {
        // pre-check based on URL
        catParam.split(',').forEach(slug => {
          const input = document.getElementById(slug.trim());
          if (input) input.checked = true;
        });
        applyFilter();
      }
    });
  </script>
</Layout>

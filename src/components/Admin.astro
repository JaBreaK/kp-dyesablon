---
//ini di isi juga
const categories = [
  "jersey", "lanyard", "spanduk", "sablon", "kaos",
  "dtf", "plastisol", "jahit", "hoodie", "kemeja", "seragam", "jaket"
];
---
<script type="module">
  import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';
  const supabase = createClient('https://pmfzypvynmyotmvbgafi.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBtZnp5cHZ5bm15b3RtdmJnYWZpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNTcxNTgsImV4cCI6MjA2MTczMzE1OH0.NimEhbTS9Rz_GGXpEABU_rWunPB6TUN7S4ufTS7FNiM');
  document.addEventListener('DOMContentLoaded', async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) location.href = '/login';
  });
  
    // Sinkronisasi logout di tab lain
  supabase.auth.onAuthStateChange((event, session) => {
    if (event === 'SIGNED_OUT') {
      window.location.replace('/login');
    }
  });

  // Tombol logout
      const btnLogout = document.getElementById('btn-logout');
      btnLogout.addEventListener('click', async () => {
        const { error } = await supabase.auth.signOut();
        if (error) {
          alert('Logout gagal: ' + error.message);
        } else {
          window.location.href = '/login';
        }
      });
</script>
<!-- Tambah padding konsisten di seluruh konten -->
<section class="p-6 md:p-" >
  <div class="max-w-5xl mx-auto bg-white dark:bg-gray-800 rounded-3xl shadow-xl p-8 animate-fadeIn">
    <!-- Header Section -->
    <div class="flex justify-between items-start mb-15"> <!-- Tambahkan flex container -->
      <h1 id="coba" class="text-4xl font-extrabold bg-gradient-to-r text-gray-700 dark:text-[#ffffff] bg-clip-text">
        Manajemen Produk
      </h1>
      
      <!-- Tombol Tambah Produk dipindah ke samping judul -->
      <button 
        id="add-btn" 
        class="px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition transform hover:scale-105 shadow-md">
        Tambah Produk
      </button>

    </div>

    <!-- Produk Form -->
    <!-- Tambah glassmorphism untuk form -->
    <form
    id="product-form"
    class="hidden grid grid-cols-1 md:grid-cols-2 gap-8 mb-10 backdrop-blur-sm bg-white/80 dark:bg-gray-800/80 rounded-xl p-6 shadow-lg opacity-0 -translate-y-4 transition-all duration-300 hover:shadow-xl">
      <input type="hidden" id="product-id" />
      <input type="hidden" id="existing-image-url" />

      <div class="md:col-span-2">
        <label
          for="title"
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >Judul Produk</label
        >
        <!-- Contoh input dengan hover dan focus animation -->
        <input
          id="title"
          type="text"
          required
          placeholder="Masukkan judul"
          class="w-full px-5 py-3 border-2 rounded-xl bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100
focus:border-primary-500 focus:ring-2 focus:ring-primary-300 transition-all duration-300
hover:border-primary-400 shadow-sm"
        />
      </div>

      <div class="md:col-span-2">
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >Kategori</label
        >
        <div id="categories" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 border rounded-lg p-3 bg-white dark:bg-gray-700">
          {categories.map((category) => (
            <label class="group flex items-center space-x-3 p-3 rounded-xl bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-all duration-300 cursor-pointer transform hover:-translate-y-1">
              <div class="relative flex items-center justify-center w-5 h-5 rounded-md border-2 border-primary-500 group-hover:border-primary-600 transition-colors">
                <input type="checkbox" value={category} class="category-checkbox absolute opacity-0 w-5 h-5 cursor-pointer peer" />
                <svg class="invisible w-4 h-4 text-primary-600 peer-checked:visible" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <span class="text-gray-700 dark:text-gray-300 group-hover:text-primary-600 transition-colors font-medium">
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </span>
            </label>
          ))}
        </div>
        
        <p id="category-error" class="text-red-500 text-sm mt-1 hidden">
          Pilih minimal satu kategori!
        </p>
      </div>

      <div class="md:col-span-2">
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >Unggah Gambar</label
        >
        <!-- Tambah animasi bounce saat drag -->
        <div
          id="drop-area"
          class="relative w-full flex flex-col items-center justify-center p-10 border-2 border-dashed
border-gray-400 rounded-2xl bg-gray-50 dark:bg-gray-700 hover:border-primary-500
cursor-pointer transition-all duration-300 hover:shadow-xl group"
        >
          <!-- SVG Icon dengan animasi -->
          <svg
            class="w-12 h-12 text-gray-400 group-hover:animate-bounce"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
            ></path>
          </svg>

          <p class="text-gray-500 dark:text-gray-400">
            Tarik & Lepas atau klik untuk memilih
          </p>
          <input
            type="file"
            id="image-file"
            accept="image/*"
            class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
          />
        </div>
        <p
          id="file-name"
          class="mt-2 text-sm italic text-gray-600 dark:text-gray-400"
        >
        </p>
        <img
          id="image-preview"
          class="mt-4 w-full max-h-48 object-contain border rounded-lg shadow hidden"
        />
      </div>

      <!-- Quill Editor Deskripsi -->
      <div class="md:col-span-2 ">
        <label
          for="editor"
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >Deskripsi</label
        >
        <div
          id="editor"
          class="bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 h-40 rounded-lg"
        >
        </div>
      </div>

      <div class="md:col-span-2 flex justify-end space-x-4 mt-25">
        <button
          type="button"
          id="cancel-btn"
          class=" px-4 py-2 bg-gray-400 hover:bg-gray-500 text-white rounded-lg transition-colors"
          >Batal</button
        >
        <button
          type="submit"
          id="submit-btn"
          class="px-8 py-3 bg-gradient-to-r from-primary-600 to-purple-600 text-white rounded-xl
        transition-all duration-300 hover:shadow-lg hover:from-primary-700 hover:to-purple-700
        active:scale-95 flex items-center"
        >
          <span class="submit-text">Simpan</span>
          <svg
            id="loading-spinner"
            class="hidden w-5 h-5 ml-2 animate-spin"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        </button>
      </div>
    </form>

    <!-- Search & Filter -->
<div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-6 space-y-4 md:space-y-0">
  <!-- Search by Title -->
  <input
    id="search-input"
    type="text"
    placeholder="Cari produk..."
    class="w-full md:w-1/2 px-4 py-2 border rounded-lg focus:border-primary-500 dark:bg-gray-800 focus:ring-primary-200 transition"
  />

  <!-- Filter by Category -->

</div>


    <!-- Produk Table -->
    <div id="products-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 items-stretch">

      <!-- Card akan di-inject via JS -->
    </div>
    <!-- Pagination Controls -->
<div id="pagination" class="flex justify-center items-center space-x-2 mt-6"></div>
          <button
      id="btn-logout"
      class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition"
    >
      Logout
    </button>
  </div>
</section>

<!-- Quill core -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<!-- Supabase & App Logic -->
<script type="module">
  import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";
  const SUPABASE_URL = "https://pmfzypvynmyotmvbgafi.supabase.co";
  const SUPABASE_ANON_KEY =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBtZnp5cHZ5bm15b3RtdmJnYWZpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNTcxNTgsImV4cCI6MjA2MTczMzE1OH0.NimEhbTS9Rz_GGXpEABU_rWunPB6TUN7S4ufTS7FNiM";
  const sb = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
  const formEl = document.getElementById("product-form");
  const addBtn = document.getElementById("add-btn");
  let allProducts = [];
let currentPage = 1;
const pageSize = 8;

// State filter
let searchTerm = "";
let filterCategory = "";


  function showForm() {
    formEl.classList.remove("hidden");
    // Delay untuk trigger transition
    requestAnimationFrame(() => {
      formEl.classList.remove("opacity-0", "-translate-y-4");
      formEl.classList.add("opacity-100", "translate-y-0");
    });
  }

  // Fungsi menyembunyikan form dengan animasi fade-out/up
  function hideForm() {
    formEl.classList.remove("opacity-100", "translate-y-0");
    formEl.classList.add("opacity-0", "-translate-y-4");
    formEl.addEventListener(
      "transitionend",
      () => formEl.classList.add("hidden"),
      { once: true }
    );
  }

  // cari by title
document.getElementById("search-input")
  .addEventListener("input", e => {
    searchTerm = e.target.value.trim().toLowerCase();
    currentPage = 1;           // kembalikan ke halaman 1
    renderProductsPage();
  });




  // Quill init
  const quill = new Quill("#editor", {
    theme: "snow",
    modules: {
      toolbar: [
        [{ header: [1, 2, 3, false] }],
        ["bold", "italic", "underline", "strike"],
        [{ size: ["small", false, "large", "huge"] }],
        [{ list: "ordered" }, { list: "bullet" }],
        ["link", "image"],
        ["clean"],
      ],
    },
    
  });
  addBtn.addEventListener("click", () => {
  resetForm();
  showForm();
  document.getElementById("cancel-btn").classList.remove("hidden"); // Tambahin ini
  formEl.scrollIntoView({ behavior: "smooth", block: "center" });
});

  
  // Contoh alert sukses dengan animasi
  function showNotification(message) {
    const alert = document.createElement("div");
    alert.className =
      "fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 animate-slideIn";
    alert.textContent = message;
    document.body.appendChild(alert);
    setTimeout(() => {
      alert.classList.add("opacity-0", "translate-y-4");
      setTimeout(() => alert.remove(), 300);
    }, 3000);
  }
  // Hidden input untuk HTML deskripsi
  const form = document.getElementById("product-form");
  const hiddenDesk = document.createElement("input");
  hiddenDesk.type = "hidden";
  hiddenDesk.id = "desk-html";
  hiddenDesk.name = "desk";
  form.appendChild(hiddenDesk);

  // Utility
  const slugify = (str) =>
    str
      .toString()
      .normalize("NFKD")
      .replace(/[^\w\s-]/g, "")
      .toLowerCase()
      .trim()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/^-+|-+$/g, "");
  const getCategories = () =>
    Array.from(document.querySelectorAll(".category-checkbox:checked")).map(
      (cb) => cb.value
    );

    async function fetchProducts() {
  try {
    const { data, error } = await sb
      .from("produk")
      .select("*")
      .order("title", { ascending: true });
    if (error) throw error;

    allProducts = data;           // simpan semua produk
    renderProductsPage();         // render halaman pertama
  } catch (error) {
    alert("Gagal memuat produk: " + error.message);
  }
}

function renderProductsPage() {
  // 1. Filter dulu
  let filtered = allProducts.filter(p => {
    const titleMatch = p.title.toLowerCase().includes(searchTerm);
    const categoryMatch = p.categories.some(cat =>
      cat.toLowerCase().includes(searchTerm)
    );
    return titleMatch || categoryMatch;
  });

  if (filterCategory) {
    filtered = filtered.filter(p => p.categories.includes(filterCategory));
  }

  // 2. Pagination slice
  const totalPages = Math.ceil(filtered.length / pageSize);
  const start = (currentPage - 1) * pageSize;
  const pageItems = filtered.slice(start, start + pageSize);

  // 3. Render grid
  const grid = document.getElementById("products-grid");
  grid.innerHTML = pageItems
    .map(p => `
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-4 flex flex-col justify-between transition hover:shadow-xl h-full">
        <img src="${p.image}" alt="${p.title}" class="rounded-xl w-full h-40 object-cover mb-3" loading="lazy" />
        <div class="flex-1">
          <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-1 truncate">${p.title}</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 capitalize">Kategori: ${p.categories.join(", ")}</p>
        </div>
        <div class="mt-4 flex items-center justify-between text-sm font-medium">
          <button data-id="${p.id}" class="edit-btn text-primary-600 hover:underline">Edit</button>
          <button data-id="${p.id}" class="delete-btn text-red-500 hover:underline">Hapus</button>
        </div>
      </div>
    `).join("") || `<p class="col-span-full text-center text-gray-500">Produk tidak ditemukan.</p>`;

  // 4. Render pagination berdasarkan jumlah filtered
  renderPagination(totalPages);

  // 5. Scroll ke grid
  document.getElementById("add-btn")
    .scrollIntoView({ behavior: "smooth", block: "start" });
}


function renderPagination(totalPages) {
  const pagDiv = document.getElementById("pagination");
  if (totalPages <= 1) {
    pagDiv.innerHTML = ""; // sembunyikan kalau <=1 halaman
    return;
  }

  let buttons = "";

  // Prev
  buttons += `<button ${currentPage === 1 ? 'disabled class="opacity-50"' : ''} data-page="${currentPage-1}" class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-800 hover:bg-gray-300">Prev</button>`;

  // Nomor halaman
  for (let i = 1; i <= totalPages; i++) {
    buttons += `<button ${i === currentPage ? 'class="px-3 py-1 rounded bg-primary-600 text-white"' : 'data-page="'+i+'" class="px-3 py-1 rounded dark:bg-gray-800 bg-gray-200 hover:bg-gray-300"'}>${i}</button>`;
  }

  // Next
  buttons += `<button ${currentPage === totalPages ? 'disabled class="opacity-50"' : ''} data-page="${currentPage+1}" class="px-3 py-1 rounded dark:bg-gray-800 bg-gray-200 hover:bg-gray-300">Next</button>`;

  pagDiv.innerHTML = buttons;

  // Attach listeners
  pagDiv.querySelectorAll("button[data-page]").forEach(btn => {
    btn.addEventListener("click", () => {
      currentPage = Number(btn.getAttribute("data-page"));
      renderProductsPage();
    });
  });
}





  function resetForm() {
    form.reset();
    document.getElementById("product-id").value = "";
    document.getElementById("existing-image-url").value = "";
    document.getElementById("file-name").textContent = "";
    document.getElementById("image-preview").classList.add("hidden");
    document.getElementById("cancel-btn").classList.add("hidden");
    document.querySelector(".submit-text").textContent = "Simpan";
    document.getElementById("category-error").classList.add("hidden");
    quill.root.innerHTML = "";
    document
      .querySelectorAll(".category-checkbox")
      .forEach((cb) => (cb.checked = false));
  }

  async function enterEdit(id) {
    try {
      const { data, error } = await sb
        .from("produk")
        .select("*")
        .eq("id", id)
        .single();
      if (error) throw error;
      document.getElementById("product-id").value = data.id;
      document.getElementById("title").value = data.title;
      document.getElementById("existing-image-url").value = data.image;
      quill.root.innerHTML = data.desk;
      document.querySelectorAll(".category-checkbox").forEach((cb) => {
        cb.checked = data.categories.includes(cb.value);
      });
      const imgPrev = document.getElementById("image-preview");
      imgPrev.src = data.image;
      imgPrev.classList.remove("hidden");
      document.getElementById("file-name").textContent =
        "Gambar saat ini: " + data.image.split("/").pop();
      document.querySelector(".submit-text").textContent = "Update";
      document.getElementById("cancel-btn").classList.remove("hidden");
showForm();
      formEl.classList.remove("hidden");
      // Scroll ke form setelah data dimuat
      document.getElementById("product-form").scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    } catch (error) {
      alert("Gagal memuat produk: " + error.message);
    }
  }

  async function deleteProduct(id) {
    if (!confirm("Apakah Anda yakin ingin menghapus produk ini?")) return;
    try {
      const { data, error } = await sb
        .from("produk")
        .select("image")
        .eq("id", id)
        .single();
      if (error) throw error;
      if (data.image) {
        const imgPath = new URL(data.image).pathname
          .split("/")
          .slice(6)
          .join("/");
        await sb.storage.from("images").remove([imgPath]);
      }
      await sb.from("produk").delete().eq("id", id);
      await fetchProducts();
      alert("Produk berhasil dihapus!");
    } catch (error) {
      alert("Gagal menghapus produk: " + error.message);
    }
  }

  // 1. Tambahkan fungsi uploadImage di sini
// Fungsi helper: upload file ke bucket "images" dan kembalikan public URL
async function uploadImage(file) {
    const path = `produk/${Date.now()}_${file.name}`;
    const { data, error } = await sb.storage
      .from("images")
      .upload(path, file, { cacheControl: "3600", upsert: false });
    if (error) throw error;
    return sb.storage.from("images").getPublicUrl(data.path).data.publicUrl;
  }


  // Event Listeners
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    

    // Validasi kategori
    const categories = getCategories();
    if (categories.length === 0) {
      document.getElementById("category-error").classList.remove("hidden");
      return;
    }

    // Ambil HTML deskripsi
    hiddenDesk.value = quill.root.innerHTML.trim();

    const submitBtn = document.getElementById("submit-btn");
    const spinner = document.getElementById("loading-spinner");
    submitBtn.disabled = true;
    spinner.classList.remove("hidden");
    document.getElementById("category-error").classList.add("hidden");

    try {
      const id = document.getElementById("product-id").value;
      const title = document.getElementById("title").value.trim();
      const desk = hiddenDesk.value;
      let imageUrl = document.getElementById("existing-image-url").value;
      const file = document.getElementById("image-file").files[0];
      

      if (file) {
        if (imageUrl) {
          const oldPath = new URL(imageUrl).pathname
            .split("/")
            .slice(6)
            .join("/");
          await sb.storage.from("images").remove([oldPath]);
        }
        imageUrl = await uploadImage(file);
      }

 // sisanya: insert/update pakai imageUrl
 const productData = { title, slug: slugify(title), categories, desk, image: imageUrl };
  if (id) {
    await sb.from("produk").update(productData).eq("id", id);
  } else {
    await sb.from("produk").insert([productData]);
  }

      resetForm();
      await fetchProducts();
    } catch (error) {
      alert("Terjadi kesalahan: " + error.message);
    } finally {
      document.getElementById("cancel-btn").classList.remove("hidden");
      submitBtn.disabled = false;
      spinner.classList.add("hidden");
    }
  });

  // Drag & Drop
  const dropArea = document.getElementById("drop-area");
  const fileInput = document.getElementById("image-file");
  const fileNameEl = document.getElementById("file-name");
  const imgPrev = document.getElementById("image-preview");

  dropArea.addEventListener('click', e => {
  // kalau kliknya langsung ke dropArea (bukan ke input yang transparan)
  if (e.target === dropArea) {
    fileInput.click();
  }
});
  fileInput.addEventListener("change", () => {
    const file = fileInput.files[0];
    if (file) {
      fileNameEl.textContent = file.name;
      const reader = new FileReader();
      reader.onload = (e) => {
        imgPrev.src = e.target.result;
        imgPrev.classList.remove("hidden");
      };
      reader.readAsDataURL(file);
    }
  });

  ["dragover", "dragleave", "drop"].forEach((ev) => {
    dropArea.addEventListener(ev, (e) => {
      e.preventDefault();
      dropArea.classList.toggle("border-primary-500", ev === "dragover");
      if (ev === "drop") {
        const file = e.dataTransfer.files[0];
        if (file && file.type.startsWith("image/")) {
          fileInput.files = e.dataTransfer.files;
          fileNameEl.textContent = file.name;
          const reader = new FileReader();
          reader.onload = (e2) => {
            imgPrev.src = e2.target.result;
            imgPrev.classList.remove("hidden");
          };
          reader.readAsDataURL(file);
        }
      }
    });
  });
    // Event listener untuk tombol Batal
    const cancelBtn = document.getElementById("cancel-btn");
  cancelBtn.addEventListener("click", () => {
    resetForm();
    hideForm();
  });

  document
    .getElementById("products-grid")
    .addEventListener("click", async (e) => {
      if (e.target.classList.contains("edit-btn"))
        await enterEdit(e.target.dataset.id);
      if (e.target.classList.contains("delete-btn"))
        await deleteProduct(e.target.dataset.id);
    });

  // Initialize
  resetForm();
  fetchProducts();
</script>

